#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/3987b911-0ff8-427d-99a3-3f93a6dff4e1

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudColoredLight color;
  int mode;
  CloudSchedule nightMode;
  bool fully_saturate;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "Led_Strip.h"
#include "HSBColor.h"
#include "time.h"

time_t now;

int rgb_arr[3];

enum Modes {
  Normal,
  Breathe,
  Rainbow,
  Off
};

bool lastNightMode = false;

Modes current_mode;
Modes previous_mode;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1000);
  // Setup All the LED Pins
  SetupLedPins();
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(LED_BUILTIN, OUTPUT);
}


void loop() {
  ArduinoCloud.update();
  // Your code here
  
  if (nightMode.isActive() != lastNightMode) {
    onNightModeChange();
    lastNightMode = nightMode.isActive();
  }

  current_mode = (Modes)mode;
  
  switch (current_mode) {
    case Normal:
      if (!color.getSwitch()){
        Serial.println("Setting the Switch to on");
        color.setSwitch(true);
        onColorChange();
      }
      break;
    case Breathe:
      if (fully_saturate && color.getBrightness() >= 85) {
        Fully_Saturate(rgb_arr);
      }
      breathe(rgb_arr, color.getBrightness());
      break;
    case Rainbow:
      doRainbow(&color);
      break;
    case Off:
      if (color.getSwitch()) {
        color.setSwitch(false);
        onColorChange();
      }
      break;
  }
}


void print_color_changes() {
  Serial.println("Color Changed");
  Serial.print("Brightness: ");
  Serial.println(color.getBrightness());
  Serial.print("Saturation: ");
  Serial.println(color.getSaturation());
  Serial.print("Switch: ");
  Serial.println(color.getSwitch());
}

/*
  Since Color is READ_WRITE variable, onColorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onColorChange() {
  Serial.println("Color Changed"); // Info (not debug)
  float brightness = color.getBrightness();
  float saturation = color.getSaturation();
  float hue = color.getHue();
  
  if (!color.getSwitch()) { // if the switch is off
    current_mode = Off;
    brightness = 0;
  }

  if (current_mode == Modes::Off && brightness != 0) { // User set the switch to on
    current_mode = Modes::Normal;
  }

  if (brightness != 0 && current_mode != Modes::Breathe) { // I don't remember why I added this (but if I remove it, it breaks)
    current_mode = Modes::Normal;
  }

  if (debugMode) print_color_changes();
  
  H2R_HSBtoRGB(hue, saturation, brightness, rgb_arr);
  if (fully_saturate && brightness >= 85) {
    Fully_Saturate(rgb_arr);
  }
  changeLedColor(rgb_arr, brightness, saturation, true, debugMode);
  analogWrite(LED_BUILTIN, 255 - brightness);
}


/*
  Since FullySaturate is READ_WRITE variable, onFullySaturateChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFullySaturateChange() {
  onColorChange();
}

/*
  Since Mode is READ_WRITE variable, onModeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onModeChange()  {
  Serial.print("Mode Changed: ");
  Serial.print((Modes)mode);
  Serial.print(" -> ");
  
  switch ((Modes)mode) {
    case Normal:
      Serial.println("Normal");
      break;
    case Breathe:
      Serial.println("Breathe");
      break;
    case Rainbow:
      Serial.println("Rainbow");
      break;
    case Off:
      Serial.println("Off");
      break;
  }

  if (Modes(mode) == Normal) {
    onColorChange();
  }
}


/*
  Since NightMode is READ_WRITE variable, onNightModeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onNightModeChange()  {
  Serial.print("Night Mode is ");
  Serial.println(nightMode.isActive() ? "Active" : "Inactive");
  if (nightMode.isActive()) {
    previous_mode = current_mode;
    mode = Modes::Off;
  }
  else if (mode == Modes::Off){
    mode = previous_mode == Modes::Off ? Modes::Normal : previous_mode;
  }
}